#!/usr/bin/env python3

import subprocess as sp
import json
import sys
from pathlib import Path

defaultFile = "xinau.json"

getIDcommands = [["xinput --list | grep '","' | grep -oP '(?<=id=)[0-9]+'"],
                 ["xinput --list-props ","| grep '","' | grep -oP '(?<=\()[0-9]+' | head -1"]]

setCommands = ["xinput --set-prop"]

userConfigDir = str(Path.home()) + "/.config/"

    
def ShowHelp(file):
    print("Usage: xinauconf [filename]")
    print("For help, use: xinauconf -h")
    print("The default configuration file is located at:", file)
    print("The configuration file need json format.")
    print("\nExample:")
    print("""
{
    "SynPS/2 Synaptics TouchPad":
    {
        "libinput Tapping Enabled":1,
	"libinput Natural Scrolling Enabled":1,
	"libinput Accel Speed":-0.4
    },
    "TPPS/2 Elan TrackPoint":
    {
         "libinput Accel Speed":-0.4
    }
}\n""")
    print("You cant get this info by using the xinput command")
    sys.exit()
    

def CheckDefaultDir(file):
    try:
        open(file, 'r').close()
    except IOError:
        f = open(file, 'a')
        f.write("{}")
        f.close()


def OpenFile(file):
    try:
        with open(file) as f:
            return json.load(f)
    except IOError:
        print("The file %s does not exsist.\nType -h or --help for help." % file)
    except json.JSONDecodeError:
        print("The file %s does not have the right format.\nType -h or --help for help." % file)
    sys.exit()


def SetConfig(config):
    for device in config:
        cmd = (getIDcommands[0][0] + 
               device + 
               getIDcommands[0][1])
        ID = int(sp.check_output(cmd, shell=True))
        for attrib in config[device]:
            
            cmd = (getIDcommands[1][0] + 
                   str(ID) + 
                   getIDcommands[1][1] + 
                   attrib + 
                   getIDcommands[1][2])
            
            attID = int(sp.check_output(cmd, shell=True))
            cmd = (setCommands[0] + " " + 
                   str(ID) + " " + 
                   str(attID) + " " + 
                   str(config[device][attrib]))
            
            sp.run(cmd, shell=True)


def RunConfig(file):
    SetConfig(OpenFile(file))
    

def main():
    fileName = userConfigDir + defaultFile
    if len(sys.argv) == 2:
        arg = sys.argv[1]
        if arg == "-h" or arg == "--help":
            ShowHelp(fileName)
        fileName = sys.argv[1]
    elif len(sys.argv) > 2:
        print("There are too many arguments.\nType -h or --help for help.")
        sys.exit()
    else:
        CheckDefaultDir(fileName)
    
    RunConfig(fileName)
    
    
if __name__ == "__main__":
    main()